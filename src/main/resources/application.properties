debug=true

spring.application.name=opentelemetry

# Monitoring
otel.exporter.otlp.protocol=grpc
otel.exporter.otlp.endpoint=http://localhost:4317
otel.resource.attributes.service.name=OTelDemo
otel.resource.attributes.service=OTelDemo
otel.resource.attributes.env=dev
otel.resource.attributes.service.instance.id=OTelDemo-api
otel.exporter.otlp.metrics.protocol=grpc
# Enable micrometer instrumentation, needed to get metrics to OTLP
otel.instrumentation.micrometer.enabled=true
# not mandatory, but can be used to enable controller telemetry
otel.instrumentation.common.experimental.controller-telemetry.enabled=true

# TODO: update what is actually needed
# In production we want to sample traces to avoid performance issues
# 1.0 => 100% sampling, check what is the best value for prod use case
#otel.traces.sampler=traceidratio
#otel.traces.sampler.arg=0.02

# Provide list of metrics you want to enable
# TODO: update what is actually needed
management.metrics.enable.all=true
# Or select which metrics you want to enable
#management.metrics.enable.tomcat=true
#management.metrics.enable.jvm=true
#management.metrics.enable.process=true
#management.metrics.enable.hikaricp=true
#management.metrics.enable.system=true
#management.metrics.enable.jdbc=true
#management.metrics.enable.http=true

# Provide tags for metrics
# TODO: update correct values for production
management.metrics.tags.server=node_1
management.metrics.tags.env=dev

# Expose actuator endpoints
# TODO: update what is actually needed
management.endpoints.web.exposure.include=*

# Expose info endpoint actuator/info
# TODO: update what is actually needed
management.info.build.enabled=true
management.info.env.enabled=true
management.info.defaults.enabled=true
management.info.git.mode=full
management.info.java.enabled=true
management.info.os.enabled=true